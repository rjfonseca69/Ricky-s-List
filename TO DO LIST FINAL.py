{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mThe Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. View Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."
     ]
    }
   ],
   "source": [
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    option = int(input(\"Mark which task as done? \"))\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    run()\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    if option == 2:\n",
    "        view()\n",
    "\n",
    "    if option == 3:\n",
    "        mark()\n",
    "\n",
    "    if option == 4:\n",
    "        remove()\n",
    "    \n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "isInteractiveWindowMessageCell": true
   },
   "source": [
    "Connected to Python 3.10.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mThe Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. View Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."
     ]
    }
   ],
   "source": [
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    option = int(input(\"Mark which task as done? \"))\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    run()\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    if option == 2:\n",
    "        view()\n",
    "\n",
    "    if option == 3:\n",
    "        mark()\n",
    "\n",
    "    if option == 4:\n",
    "        remove()\n",
    "    \n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    option = int(input(\"Mark which task as done? \"))\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    run()\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    if option == 2:\n",
    "        view()\n",
    "\n",
    "    if option == 3:\n",
    "        mark()\n",
    "\n",
    "    if option == 4:\n",
    "        remove()\n",
    "    \n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    option = int(input(\"Mark which task as done? \"))\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    run()\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    if option == 2:\n",
    "        view()\n",
    "\n",
    "    if option == 3:\n",
    "        mark()\n",
    "\n",
    "    if option == 4:\n",
    "        remove()\n",
    "    \n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Simple Calculator\n",
    "#Ricardo Fonseca \n",
    "#11/29\n",
    "\n",
    "#Init\n",
    "#Functions\n",
    "#Takes both parameters, adds them both together, and prints the result\n",
    "def addition(number1, number2):\n",
    "    solution = number1 + number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def subtraction(number1, number2):\n",
    "    solution = number1 - number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def multiplication(number1, number2):\n",
    "    solution = number1 * number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def division(number1, number2):\n",
    "    solution = number1 / number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def modulus(number1, number2):\n",
    "    solution = number1 % number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "#Main\n",
    "print(\"Welcome to Simple Calculator! Sponsored by Texas Instruments c. 2023\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = addition \\n2= subtraction \\n3 = Multiplication \\n4 = Division \\n5 = Modulus \\n6 = Quit the Program\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "#Collect two numbers from the user to operate on ..\n",
    "number1 = float(input(\"what is the first number: \"))\n",
    "number2 = float(input(\"What is the second number: \"))\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        addition(number1, number2)\n",
    "\n",
    "    if option == 2:\n",
    "        subtraction(number1, number2)\n",
    "\n",
    "    if option == 3:\n",
    "        multiplication(number1, number2)\n",
    "\n",
    "    if option == 4:\n",
    "        division(number1, number2)\n",
    "\n",
    "    if option == 5:\n",
    "        modulus(number1, number2)\n",
    "\n",
    "    if option == 6:\n",
    "        quit()\n",
    "\n",
    "print "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Simple Calculator\n",
    "#Ricardo Fonseca \n",
    "#11/29\n",
    "\n",
    "#Init\n",
    "#Functions\n",
    "#Takes both parameters, adds them both together, and prints the result\n",
    "def addition(number1, number2):\n",
    "    solution = number1 + number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def subtraction(number1, number2):\n",
    "    solution = number1 - number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def multiplication(number1, number2):\n",
    "    solution = number1 * number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def division(number1, number2):\n",
    "    solution = number1 / number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "def modulus(number1, number2):\n",
    "    solution = number1 % number2\n",
    "    return(solution)\n",
    "    run()\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "#Main\n",
    "print(\"Welcome to Simple Calculator! Sponsored by Texas Instruments c. 2023\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = addition \\n2= subtraction \\n3 = Multiplication \\n4 = Division \\n5 = Modulus \\n6 = Quit the Program\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "#Collect two numbers from the user to operate on ..\n",
    "number1 = float(input(\"what is the first number: \"))\n",
    "number2 = float(input(\"What is the second number: \"))\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        addition(number1, number2)\n",
    "\n",
    "    if option == 2:\n",
    "        subtraction(number1, number2)\n",
    "\n",
    "    if option == 3:\n",
    "        multiplication(number1, number2)\n",
    "\n",
    "    if option == 4:\n",
    "        division(number1, number2)\n",
    "\n",
    "    if option == 5:\n",
    "        modulus(number1, number2)\n",
    "\n",
    "    if option == 6:\n",
    "        quit()\n",
    "\n",
    "print "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "isInteractiveWindowMessageCell": true
   },
   "source": [
    "Connected to Python 3.10.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "'' is not in list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 3\n\u001b[0;32m      <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=0'>1</a>\u001b[0m symbolList \u001b[39m=\u001b[39m [\u001b[39m\"\u001b[39m\u001b[39m✓\u001b[39m\u001b[39m\"\u001b[39m, \u001b[39m\"\u001b[39m\u001b[39m☒\u001b[39m\u001b[39m\"\u001b[39m, \u001b[39m\"\u001b[39m\u001b[39m☺\u001b[39m\u001b[39m\"\u001b[39m]\n\u001b[0;32m      <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=1'>2</a>\u001b[0m ans \u001b[39m=\u001b[39m \u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhich symbol would you like to change?: \u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m----> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=2'>3</a>\u001b[0m index \u001b[39m=\u001b[39m symbolList\u001b[39m.\u001b[39;49mindex(ans)\n\u001b[0;32m      <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=3'>4</a>\u001b[0m \u001b[39mprint\u001b[39m(index)\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=10'>11</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39madd\u001b[39m():\n",
      "\u001b[1;31mValueError\u001b[0m: '' is not in list"
     ]
    }
   ],
   "source": [
    "symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "ans = input(\"Which symbol would you like to change?: \")\n",
    "index = symbolList.index(ans)\n",
    "print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 77\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=73'>74</a>\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m5\u001b[39m:\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=74'>75</a>\u001b[0m         quit()\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=76'>77</a>\u001b[0m run()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 59\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=55'>56</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=57'>58</a>\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=58'>59</a>\u001b[0m         add()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=60'>61</a>\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=61'>62</a>\u001b[0m         view()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=12'>13</a>\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=13'>14</a>\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=14'>15</a>\u001b[0m run()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 59\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=55'>56</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=57'>58</a>\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=58'>59</a>\u001b[0m         add()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=60'>61</a>\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=61'>62</a>\u001b[0m         view()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=12'>13</a>\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=13'>14</a>\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=14'>15</a>\u001b[0m run()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 59\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=55'>56</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=57'>58</a>\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=58'>59</a>\u001b[0m         add()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=60'>61</a>\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=61'>62</a>\u001b[0m         view()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 13\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=10'>11</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39madd\u001b[39m():\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=11'>12</a>\u001b[0m     \u001b[39mglobal\u001b[39;00m x\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=12'>13</a>\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=13'>14</a>\u001b[0m     myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=14'>15</a>\u001b[0m     run()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.Show list       2.Insert Task        3.Mark completed        4.Delete Task     5.Close      6.Sort alphabetically      7.Clear items on the list     8. Print amount of items on the list\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "list.remove(x): x not in list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mUntitled-2\u001b[0m in \u001b[0;36mline 75\n\u001b[0;32m     <a href='untitled:Untitled-2?line=71'>72</a>\u001b[0m     \u001b[39mprint\u001b[39m(\u001b[39mlen\u001b[39m(myList))\n\u001b[0;32m     <a href='untitled:Untitled-2?line=73'>74</a>\u001b[0m \u001b[39m#Main\u001b[39;00m\n\u001b[1;32m---> <a href='untitled:Untitled-2?line=74'>75</a>\u001b[0m Todoprogram()\n",
      "\u001b[1;32mUntitled-2\u001b[0m in \u001b[0;36mline 25\u001b[0m, in \u001b[0;36mTodoprogram\u001b[1;34m()\n\u001b[0;32m     <a href='untitled:Untitled-2?line=22'>23</a>\u001b[0m     Todoprogram()\n\u001b[0;32m     <a href='untitled:Untitled-2?line=23'>24</a>\u001b[0m \u001b[39melif\u001b[39;00m answer2 \u001b[39m==\u001b[39m\u001b[39m3\u001b[39m:\n\u001b[1;32m---> <a href='untitled:Untitled-2?line=24'>25</a>\u001b[0m     markcomplete()\n\u001b[0;32m     <a href='untitled:Untitled-2?line=25'>26</a>\u001b[0m     Todoprogram()\n\u001b[0;32m     <a href='untitled:Untitled-2?line=26'>27</a>\u001b[0m \u001b[39melif\u001b[39;00m answer2 \u001b[39m==\u001b[39m\u001b[39m4\u001b[39m:\n",
      "\u001b[1;32mUntitled-2\u001b[0m in \u001b[0;36mline 59\u001b[0m, in \u001b[0;36mmarkcomplete\u001b[1;34m()\n\u001b[0;32m     <a href='untitled:Untitled-2?line=56'>57</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mmarkcomplete\u001b[39m():\n\u001b[0;32m     <a href='untitled:Untitled-2?line=57'>58</a>\u001b[0m     complete \u001b[39m=\u001b[39m \u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mwhat is completed\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> <a href='untitled:Untitled-2?line=58'>59</a>\u001b[0m     myList\u001b[39m.\u001b[39;49mremove(complete)\n\u001b[0;32m     <a href='untitled:Untitled-2?line=59'>60</a>\u001b[0m     myList\u001b[39m.\u001b[39mappend(\u001b[39m\"\u001b[39m\u001b[39mX\u001b[39m\u001b[39m\"\u001b[39m \u001b[39m+\u001b[39m complete)\n",
      "\u001b[1;31mValueError\u001b[0m: list.remove(x): x not in list"
     ]
    }
   ],
   "source": [
    "#Ricardo Fonseca\n",
    "#1/12/2024\n",
    "#To-Do List 2\n",
    "\n",
    "#01/10\n",
    "#To do list\n",
    "\n",
    "#initialize\n",
    "answer = input(\"What do you want in your list\")\n",
    "myList = [answer]\n",
    "\n",
    "\n",
    "#functions\n",
    "#Runs the actual todo program that provides a menu for options that the list does\n",
    "def Todoprogram(): \n",
    "    print(\"1.Show list       2.Insert Task        3.Mark completed        4.Delete Task     5.Close      6.Sort alphabetically      7.Clear items on the list     8. Print amount of items on the list\")\n",
    "    answer2 = int(input(\"Please choose a option\"))\n",
    "    if answer2 ==1:\n",
    "        print(myList)\n",
    "        Todoprogram()\n",
    "    elif answer2 ==2:\n",
    "        insertTask()\n",
    "        Todoprogram()\n",
    "    elif answer2 ==3:\n",
    "        markcomplete()\n",
    "        Todoprogram()\n",
    "    elif answer2 ==4:\n",
    "        removetask()\n",
    "        Todoprogram()\n",
    "    elif answer2 ==5:\n",
    "        print(\"Goodbye\")\n",
    "    elif answer2 ==6:\n",
    "        sortAlphabetically()\n",
    "        Todoprogram()\n",
    "    elif answer2 ==7:\n",
    "        clearList()\n",
    "        Todoprogram()\n",
    "    elif answer2 == 8:\n",
    "        numberofitems()\n",
    "        Todoprogram()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#inserts a task into the to do list\n",
    "def insertTask():\n",
    "    addedtask=input(\"what food do you want added\")\n",
    "    locationtask = int(input(\"where should it be placed?\")) \n",
    "    myList.insert(locationtask,addedtask)\n",
    "#removes a task from the todo list\n",
    "def removetask():\n",
    "    removedtask = input(\"What food do you want removed\")\n",
    "    myList.remove(removedtask)\n",
    "\n",
    "#Marks the chose task as a complete with a X\n",
    "def markcomplete():\n",
    "    complete = input(\"what is completed\")\n",
    "    myList.remove(complete)\n",
    "    myList.append(\"X\" + complete)\n",
    "\n",
    "#Sorts list alphabetically\n",
    "def sortAlphabetically():\n",
    "    myList.sort()\n",
    "\n",
    "#Clears all items on the list\n",
    "def clearList():\n",
    "    myList.clear()\n",
    "\n",
    "#Says how many items are on the list\n",
    "def numberofitems():\n",
    "    print(len(myList))\n",
    "\n",
    "#Main\n",
    "Todoprogram()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 78\u001b[0m\n\u001b[0;32m     75\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m5\u001b[39m:\n\u001b[0;32m     76\u001b[0m         quit()\n\u001b[1;32m---> 78\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[5], line 60\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     59\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> 60\u001b[0m         add()\n\u001b[0;32m     62\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     63\u001b[0m         view()\n",
      "Cell \u001b[1;32mIn[5], line 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\u001b[0m\n\u001b[0;32m     13\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     14\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 15\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[5], line 60\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     59\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> 60\u001b[0m         add()\n\u001b[0;32m     62\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     63\u001b[0m         view()\n",
      "Cell \u001b[1;32mIn[5], line 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\u001b[0m\n\u001b[0;32m     13\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     14\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 15\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[5], line 60\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mrun\u001b[39m():\n\u001b[0;32m     59\u001b[0m     \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> 60\u001b[0m         add()\n\u001b[0;32m     62\u001b[0m     \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     63\u001b[0m         view()\n",
      "Cell \u001b[1;32mIn[5], line 13\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39madd\u001b[39m():\n\u001b[0;32m     12\u001b[0m     \u001b[39mglobal\u001b[39;00m x\n\u001b[1;32m---> 13\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     14\u001b[0m     myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     15\u001b[0m     run()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "print(\"Welcome to To-Do List!\")\n",
    "print(\"Please choose an operation ny entering a number 1-5\")\n",
    "print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "option = int(input(\"Option: \"))\n",
    "\n",
    "\n",
    "def run():\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    if option == 5:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n",
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n",
      "['Indiana Jones', 'Star Wars', 'Up', 'Ted', 'Superman', 'Superbad', 'The Joker']\n",
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 79\u001b[0m\n\u001b[0;32m     76\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[0;32m     77\u001b[0m         quit()\n\u001b[1;32m---> 79\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[6], line 61\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     58\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mOption: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     60\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> 61\u001b[0m     add()\n\u001b[0;32m     63\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     64\u001b[0m     view()\n",
      "Cell \u001b[1;32mIn[6], line 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\u001b[0m\n\u001b[0;32m     13\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     14\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 15\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[6], line 64\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     61\u001b[0m     add()\n\u001b[0;32m     63\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[1;32m---> 64\u001b[0m     view()\n\u001b[0;32m     66\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m3\u001b[39m:\n\u001b[0;32m     67\u001b[0m     mark()\n",
      "Cell \u001b[1;32mIn[6], line 20\u001b[0m, in \u001b[0;36mview\u001b[1;34m()\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mview\u001b[39m():\n\u001b[0;32m     19\u001b[0m     \u001b[39mprint\u001b[39m(myList)\n\u001b[1;32m---> 20\u001b[0m     run()\n",
      "Cell \u001b[1;32mIn[6], line 58\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     56\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease choose an operation ny entering a number 1-5\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     57\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39m1 = Add a task \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m2 = View current to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m3 = Mark task as completed \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m4 = Remove a task from the to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m5 = Quit\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 58\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mOption: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     60\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[0;32m     61\u001b[0m     add()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n",
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n",
      "['Indiana Jones', 'Star Wars', 'Up', 'Ted', 'Superman', 'Superbad', 'The Joker']\n",
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 79\u001b[0m\n\u001b[0;32m     76\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[0;32m     77\u001b[0m         quit()\n\u001b[1;32m---> 79\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[7], line 61\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     58\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mOption: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     60\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[1;32m---> 61\u001b[0m     add()\n\u001b[0;32m     63\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[0;32m     64\u001b[0m     view()\n",
      "Cell \u001b[1;32mIn[7], line 15\u001b[0m, in \u001b[0;36madd\u001b[1;34m()\u001b[0m\n\u001b[0;32m     13\u001b[0m x \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mWhere would you like to place new task? #Select a number 0-5\u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     14\u001b[0m myList\u001b[39m.\u001b[39minsert(x,\u001b[39m\"\u001b[39m\u001b[39mUp\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 15\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[7], line 64\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     61\u001b[0m     add()\n\u001b[0;32m     63\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[1;32m---> 64\u001b[0m     view()\n\u001b[0;32m     66\u001b[0m \u001b[39melif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m3\u001b[39m:\n\u001b[0;32m     67\u001b[0m     mark()\n",
      "Cell \u001b[1;32mIn[7], line 20\u001b[0m, in \u001b[0;36mview\u001b[1;34m()\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mview\u001b[39m():\n\u001b[0;32m     19\u001b[0m     \u001b[39mprint\u001b[39m(myList)\n\u001b[1;32m---> 20\u001b[0m     run()\n",
      "Cell \u001b[1;32mIn[7], line 58\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     56\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease choose an operation ny entering a number 1-5\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     57\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m1 = Add a task \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m2 = View current to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m3 = Mark task as completed \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m4 = Remove a task from the to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m5 = Quit\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 58\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mOption: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     60\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[0;32m     61\u001b[0m     add()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 84\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=80'>81</a>\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=81'>82</a>\u001b[0m         quit()\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=83'>84</a>\u001b[0m run()\n",
      "\u001b[1;32mc:\\Users\\rjfonseca\\Documents\\Ricardo Fonseca\\To-Do List.py\u001b[0m in \u001b[0;36mline 58\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=55'>56</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease choose an operation ny entering a number 1-5\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=56'>57</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m1 = Add a task \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m2 = View current to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m3 = Mark task as completed \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m4 = Remove a task from the to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m5 = Quit\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=57'>58</a>\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mOption: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=59'>60</a>\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[0;32m     <a href='file:///c%3A/Users/rjfonseca/Documents/Ricardo%20Fonseca/To-Do%20List.py?line=60'>61</a>\u001b[0m     add()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "    elif option == 6:\n",
    "        alpha()\n",
    "\n",
    "    elif option == 7:\n",
    "        number()\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Clear List \n",
      "6 = Sort Alphabetically \n",
      "7 = Place Numbers on List \n",
      " Other = Quit\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 84\u001b[0m\n\u001b[0;32m     81\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[0;32m     82\u001b[0m         quit()\n\u001b[1;32m---> 84\u001b[0m run()\n",
      "Cell \u001b[1;32mIn[9], line 58\u001b[0m, in \u001b[0;36mrun\u001b[1;34m()\u001b[0m\n\u001b[0;32m     56\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease choose an operation ny entering a number 1-5\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     57\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m1 = Add a task \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m2 = View current to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m3 = Mark task as completed \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m4 = Remove a task from the to-do list \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m5 = Clear List \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m6 = Sort Alphabetically \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m7 = Place Numbers on List \u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m Other = Quit\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 58\u001b[0m option \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mOption: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     60\u001b[0m \u001b[39mif\u001b[39;00m option \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m: \n\u001b[0;32m     61\u001b[0m     add()\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Clear List \\n6 = Sort Alphabetically \\n7 = Place Numbers on List \\n Other = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "    elif option == 6:\n",
    "        alpha()\n",
    "\n",
    "    elif option == 7:\n",
    "        number()\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to To-Do List!\n",
      "Please choose an operation ny entering a number 1-5\n",
      "\n",
      "1 = Add a task \n",
      "2 = View current to-do list \n",
      "3 = Mark task as completed \n",
      "4 = Remove a task from the to-do list \n",
      "5 = Clear List \n",
      "6 = Sort Alphabetically \n",
      "7 = Place Numbers on List \n",
      "Other = Quit\n"
     ]
    },
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mThe Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. View Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."
     ]
    }
   ],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Clear List \\n6 = Sort Alphabetically \\n7 = Place Numbers on List \\nOther = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "    elif option == 6:\n",
    "        alpha()\n",
    "\n",
    "    elif option == 7:\n",
    "        number()\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Clear List \\n6 = Sort Alphabetically \\n7 = Place Numbers on List \\nOther = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "    elif option == 6:\n",
    "        alpha()\n",
    "\n",
    "    elif option == 7:\n",
    "        number()\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#symbolList = [\"✓\", \"☒\", \"☺\"]\n",
    "#ans = input(\"Which symbol would you like to change?: \")\n",
    "#index = symbolList.index(ans)\n",
    "#print(index)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add():\n",
    "    global x\n",
    "    x = int(input(\"Where would you like to place new task? #Select a number 0-5\"))\n",
    "    myList.insert(x,\"Up\")\n",
    "    run()\n",
    "    \n",
    "\n",
    "def view():\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def mark():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    ans = input(\"Which movie would you like to as complete?: \")\n",
    "    index = myList.index(ans)\n",
    "    print(\"completed\")\n",
    "    run()\n",
    "\n",
    "def remove():\n",
    "    removal = int(input(\"Which task would you like to remove? 0 is first item on the list and last item is 5. \"))\n",
    "    myList.pop(removal)\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def clear():\n",
    "    myList.clear()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def alpha():\n",
    "    myList.sort()\n",
    "    print(myList)\n",
    "    run()\n",
    "\n",
    "def number():\n",
    "    print(len(myList))\n",
    "\n",
    "\n",
    "\n",
    "myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "\n",
    "\n",
    "def run():\n",
    "    myList = [\"Indiana Jones\", \"Star Wars\", \"Ted\", \"Superman\", \"Superbad\", \"The Joker\"]\n",
    "    print(\"Welcome to To-Do List!\")\n",
    "    print(\"Please choose an operation ny entering a number 1-5\")\n",
    "    print(\"\\n1 = Add a task \\n2 = View current to-do list \\n3 = Mark task as completed \\n4 = Remove a task from the to-do list \\n5 = Clear List \\n6 = Sort Alphabetically \\n7 = Place Numbers on List \\nOther = Quit\")\n",
    "    option = int(input(\"Option: \"))\n",
    "    \n",
    "    if option == 1: \n",
    "        add()\n",
    "\n",
    "    elif option == 2:\n",
    "        view()\n",
    "\n",
    "    elif option == 3:\n",
    "        mark()\n",
    "\n",
    "    elif option == 4:\n",
    "        remove()\n",
    "    \n",
    "    elif option == 5:\n",
    "        clear()\n",
    "\n",
    "    elif option == 6:\n",
    "        alpha()\n",
    "\n",
    "    elif option == 7:\n",
    "        number()\n",
    "\n",
    "    else:\n",
    "        quit()\n",
    "\n",
    "run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
